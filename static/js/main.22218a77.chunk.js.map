{"version":3,"sources":["utils/Api.ts","utils/Authentication.ts","components/home/Home.tsx","components/navbar/Navbar.tsx","components/dashboard/EarningsGraph.tsx","components/drawer/ClippedDrawer.tsx","components/dashboard/Dashboard.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["ApiUrl","getGraphsData","token","a","axios","get","then","response","data","catch","error","alert","console","log","getUser","addGraphs","amount","dir","post","headers","getToken","Cookies","Home","props","state","email","picture","document","documentElement","classList","toggle","cookies","search","window","location","URLSearchParams","cookie","set","setToken","this","getUserInfo","setState","Email","Picture","id","className","Component","backend","style","makeStyles","theme","createStyles","navbarEnd","marginLeft","color","background","homeAppBar","boxShadow","zIndex","drawer","appBar","button","Navbar","classes","useState","hash","setHash","userPicture","setUserPicture","useEffect","addEventListener","onHashChange","getUserPicture","userInfo","ThemeProvider","AppBar","position","Toolbar","IconButton","href","ghPagesRouting","Typography","Avatar","src","icon","faGithub","faLinkedin","container","width","backgroundColor","margin","borderRadius","containerMobile","typography","fontSize","marginBottom","axisStyle","grid","stroke","ticks","opacity","tickLabels","fill","font","EarningsGraph","EarningsGraphData","matchMedia","matches","length","domainPadding","VictoryTheme","material","tickValues","dependentAxis","tickFormat","x","colorScale","map","key","ID","Tuples","y","flexShrink","drawerPaper","expansionPanel","avatar","marginRight","toolbar","mixins","ClippedDrawer","updateCallback","adjustNumberOfGraphs","number","Drawer","variant","paper","ExpansionPanel","ExpansionPanelSummary","ListItem","faChartBar","ListItemText","primary","ExpansionPanelDetails","ButtonGroup","size","aria-label","Button","onClick","display","flexWrap","Dashboard","EarningsGraphArray","graphsData","setGraphsData","fetchAndSetGraphsData","fetchedData","createMuiTheme","palette","main","secondary","fontFamily","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0XAEMA,EAAiB,6BAYhB,SAAeC,EAAtB,kC,2CAAO,WAA6BC,GAA7B,SAAAC,EAAA,qEACUC,IAAMC,IAAIL,EAAS,qBAAuBE,GAClDI,KAAK,SAAAC,GACF,OAAOA,EAASC,OACjBC,MAAM,SAAAC,GACLC,MAAM,gBACNC,QAAQC,IAAIH,KANjB,kF,sBAUA,SAAeI,EAAtB,kC,2CAAO,WAAuBZ,GAAvB,SAAAC,EAAA,qEACUC,IAAMC,IAAIL,EAAS,eAAiBE,GAAOI,KAAK,SAAAC,GACzD,OAAOA,EAASC,OACjBC,MAAM,SAAAC,GACLC,MAAM,gBACNC,QAAQC,IAAIH,KALb,kF,sBASA,SAAeK,EAAtB,oC,2CAAO,WAAyBb,EAAec,GAAxC,SAAAb,EAAA,4DACHS,QAAQK,IAAIf,GACZU,QAAQK,IAAID,GAFT,SAGUZ,IAAMc,KAAKlB,EAAS,aAC7B,CACIE,MAAOA,EACPc,OAAQA,GACT,CACCG,QAAS,CACL,eAAgB,gBAErBV,MAAM,SAAAC,GACTC,MAAM,gBACNC,QAAQC,IAAIH,KAbb,kF,4CCfA,SAASU,IAEZ,OADgB,IAAIC,KACLhB,IAAI,SCPhB,IAiDQiB,EAjDf,YACI,WAAYC,GAAgB,IAAD,8BACvB,4CAAMA,KACDC,MAAQ,CACTC,MAAO,GACPC,QAAS,IAJU,EAD/B,iFAUQC,SAASC,gBAAgBC,UAAUC,OAAO,sBDrB3C,WACH,IAAMC,EAAU,IAAIV,IACdW,EAASC,OAAOC,SAASF,OAE3B9B,EADW,IAAIiC,gBAAgBH,GAChB3B,IAAI,SACvB,GAAc,OAAVH,EAAgB,CAChB,IAAMkC,EAASL,EAAQ1B,IAAI,SACb,MAAV+B,IACAlC,EAAQkC,GAGF,OAAVlC,GACA6B,EAAQM,IAAI,QAASnC,GCUrBoC,GACAC,KAAKC,gBAZb,6CAgBQb,SAASC,gBAAgBC,UAAUC,OAAO,wBAhBlD,oCAmBmB,IAAD,OAEVhB,EADcM,KACCd,KAAK,SAAAC,GAAQ,OAAI,EAAKkC,SAAS,CAC1ChB,MAAOlB,EAASmC,MAChBhB,QAASnB,EAASoC,cAvB9B,+BA2Bc,IAAD,EACoBJ,KAAKf,MAAvBC,EADF,EACEA,MADF,EACSC,QACd,OACI,yBAAKkB,GAAG,cACHC,UAAU,kDACX,yBAAKA,UAAU,mBACX,6BAASA,UAAU,iBACf,uBAAGD,GAAG,eAAeC,UAAU,SAA/B,kBACA,yBAAKA,UAAU,WAAf,kDAGA,yBAAKA,UAAoB,IAATpB,EAAc,YAAc,WAA5C,WACaA,UAvCrC,GAA0BqB,a,yGCApBC,EAAU,8BAMVC,EAAQC,IAAW,SAACC,GAAD,OACrBC,YAAa,CACTC,UAAW,CACPC,WAAY,OACZ,UAAW,CACPC,MAAO,UACPC,WAAY,SAGpBC,WAAY,CACRD,WAAY,cACZE,UAAW,OACXC,OAAQR,EAAMQ,OAAOC,OAAS,GAElCC,OAAQ,CACJL,WAAY,UACZE,UAAW,OACXC,OAAQR,EAAMQ,OAAOC,OAAS,GAElCE,OAAQ,CACJ,UAAW,CACPP,MAAO,UACPC,WAAY,aAsEbO,EAhEA,SAACvC,GACZ,IAAMwC,EAAUf,IACTE,EAAS3B,EAAT2B,MAFuB,EAGNc,mBAAS/B,OAAOC,SAAS+B,MAHnB,mBAGvBA,EAHuB,KAGjBC,EAHiB,OAIQF,mBAAS,IAJjB,mBAIvBG,EAJuB,KAIVC,EAJU,KAM9BC,oBAAU,WACNpC,OAAOqC,iBAAiB,aAAcC,GACtCC,KACD,IAEH,IAAMD,EAAe,WACjBL,EAAQjC,OAAOC,SAAS+B,OAGtBO,EAAc,sCAAG,8BAAArE,EAAA,4DACbD,EAAQkB,IADK,SAEIN,EAAQZ,GAFZ,OAEbuE,EAFa,OAGnBL,EAAeK,EAAS9B,SAHL,yCAAH,qDAMpB,OACI,kBAAC+B,EAAA,EAAD,CAAexB,MAAOA,GAClB,kBAACyB,EAAA,EAAD,CACIC,SAAS,WACT/B,UAAmB,MAARoB,EAAeF,EAAQP,WAAaO,EAAQH,QACvD,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYxB,MAAM,UAAUyB,KAAMC,wBAAsBnC,UAAWkB,EAAQF,QACvE,kBAACoB,EAAA,EAAD,cAIJ,kBAACH,EAAA,EAAD,CAAYxB,MAAM,UAAUyB,KAAMC,iCAA+BnC,UAAWkB,EAAQF,QAChF,kBAACoB,EAAA,EAAD,mBAIJ,kBAACH,EAAA,EAAD,CAAYxB,MAAM,UAAUyB,KAAMhC,EAAU,qBAChCF,UAA0B,IAAfsB,EAAoBJ,EAAQX,UAAY,aAC3D,kBAAC6B,EAAA,EAAD,eAIJ,kBAACH,EAAA,EAAD,CAAYxB,MAAM,UAAUyB,KAAMhC,EAAU,qBAChCF,UAA0B,IAAfsB,EAAoB,YAAcJ,EAAQX,WAC7D,kBAAC8B,EAAA,EAAD,CAAQC,IAAKhB,KAEjB,kBAACW,EAAA,EAAD,CAAYxB,MAAM,UACNT,UAAWkB,EAAQF,OACnBkB,KAAK,2BACb,kBAAC,IAAD,CAAiBK,KAAMC,OAE3B,kBAACP,EAAA,EAAD,CAAYxB,MAAM,UACNT,UAAWkB,EAAQF,OACnBkB,KAAK,yDACb,kBAAC,IAAD,CAAiBK,KAAME,W,8DC9EzCtC,EAAQC,IAAW,kBACrBE,IAAa,CACToC,UAAW,CACPC,MAAO,IACPC,gBAAiB,UACjBC,OAAQ,GACRC,aAAc,IAElBC,gBAAiB,CACbJ,MAAO,OACPC,gBAAiB,UACjBC,OAAQ,GACRC,aAAc,IAElBE,WAAY,CACRvC,MAAO,QACPwC,SAAU,GACVJ,OAAQ,GACRK,cAAe,GACf1C,WAAY,OACZmC,MAAO,WAKbQ,EAAY,CACdC,KAAM,CAACC,OAAQ,QACfC,MAAO,CAACC,QAAS,GACjBC,WAAY,CAACC,KAAM,QAASC,KAAM,UAgCvBC,GA7BO,SAACjF,GACnB,IAAMwC,EAAUf,IACTE,EAA4B3B,EAA5B2B,MAAOuD,EAAqBlF,EAArBkF,kBAEd,OACI,kBAAC/B,EAAA,EAAD,CAAexB,MAAOA,GAClB,yBACIL,UAAWZ,OAAOyE,WAAW,sBAAsBC,QAAU5C,EAAQ6B,gBAAkB7B,EAAQwB,WAC/F,kBAACN,EAAA,EAAD,CAAYpC,UAAWkB,EAAQ8B,YAA/B,wBACUY,EAAkBG,OAD5B,UAEA,kBAAC,IAAD,CAAcC,cAAe,GAAI3D,MAAO4D,IAAaC,UACjD,kBAAC,IAAD,CAAaC,WAAY,CAAC,YAAa,YAAa,YAAa,aAAchE,MAAOgD,IACtF,kBAAC,IAAD,CAAaiB,eAAa,EAACC,WAAY,SAACC,GAAD,iBAAYA,EAAI,IAAhB,MAA0BnE,MAAOgD,IACxE,kBAAC,IAAD,CAAcoB,WAAY,QACrBX,EAAkBY,IAAI,SAAA7G,GAAI,OAAK,kBAAC,IAAD,CAC5B8G,IAAK9G,EAAK+G,GACV/G,KAAMA,EAAKgH,OACXL,EAAG,UACHM,EAAG,oB,0FCjDzBzE,GAAQC,IAAW,SAACC,GAAD,OACrBC,IAAa,CACTQ,OAAQ,CACJ6B,MALQ,IAMRkC,WAAY,GAEhBC,YAAa,CACTnC,MATQ,IAURC,gBAAiB,UACjBnC,MAAO,WAEXsE,eAAgB,CACZnC,gBAAiB,UACjBnC,MAAO,WAEXO,OAAQ,CACJ4B,gBAAiB,UACjBnC,MAAO,UACPwC,SAAU,GACVN,MAAO,IAEXqC,OAAQ,CACJpC,gBAAiB,UACjBqC,YAAa,IAEjBC,QAAS7E,EAAM8E,OAAOD,YA8CfE,GA1CO,SAAC1G,GAAmB,IAC/B2B,EAAyB3B,EAAzB2B,MAAOgF,EAAkB3G,EAAlB2G,eACRnE,EAAUf,KAEVmF,EAAoB,sCAAG,WAAOC,GAAP,SAAAjI,EAAA,qEACnBY,EAAUK,IAAYgH,GADH,OAEzBF,IAFyB,yCAAH,sDAK1B,OACI,kBAACxD,EAAA,EAAD,CAAexB,MAAOA,GAClB,kBAACmF,GAAA,EAAD,CACInF,MAAOA,EACPL,UAAWkB,EAAQJ,OAAQ2E,QAAQ,YAAYvE,QAAS,CACxDwE,MAAOxE,EAAQ4D,cAEf,yBAAK9E,UAAWkB,EAAQgE,UACxB,kBAACS,GAAA,EAAD,CAAgB3F,UAAWkB,EAAQ6D,gBAC/B,kBAACa,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAU7E,QAAM,EAACyD,IAAK,UAClB,kBAACpC,EAAA,EAAD,CAAQrC,UAAWkB,EAAQ8D,QACvB,kBAAC,IAAD,CAAiBzC,KAAMuD,QAE3B,kBAACC,GAAA,EAAD,CAAcC,QAAS,aAG/B,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAaC,KAAK,QAAQC,aAAW,+BACjC,kBAACC,GAAA,EAAD,CAAQC,QAAS,WACbhB,GAAsB,IACvBtF,UAAWkB,EAAQF,QAFtB,KAGA,kBAACqF,GAAA,EAAD,CAAQC,QAAS,WACbhB,EAAqB,IACtBtF,UAAWkB,EAAQF,QAFtB,WCvEtBb,GAAQC,IAAW,kBACrBE,IAAa,CACToC,UAAW,CACP6D,QAAS,OACTC,SAAU,OACVhG,WAAY,OACZyE,YAAa,OACbtC,MAAO,WAuCJ8D,GAlCG,SAAC/H,GACf,IAAMwC,EAAUf,KACTE,EAAS3B,EAAT2B,MAF0B,EAGGc,mBAAS,CACzCuF,mBAAoB,CAAC,CACjB9C,kBAAmB,OALM,mBAG1B+C,EAH0B,KAGdC,EAHc,KASjCpF,oBAAU,WACNqF,KACD,IAEH,IAAMA,EAAqB,sCAAG,8BAAAvJ,EAAA,4DACpBD,EAAQkB,IADY,SAEAnB,EAAcC,GAFd,OAGY,OADhCyJ,EAFoB,QAGVJ,mBACZE,EAAcE,GAEdF,EAAc,CAACF,mBAAoB,KANb,yCAAH,qDAU3B,OACI,yBAAK1G,UAAWkB,EAAQwB,WACpB,kBAAC,GAAD,CAAerC,MAAOA,EAAOgF,eAAgBwB,IAC5CF,EAAWD,mBAAmBlC,IAAI,SAAA7G,GAAI,OACnC,kBAAC,GAAD,CAAe0C,MAAOA,EAAOuD,kBAAmBjG,EAAKiG,wB,UC7C/DvD,G,OAAQ0G,GAAe,CACzBC,QAAS,CACLhB,QAAS,CAACiB,KAAM,WAChBC,UAAW,CAACD,KAAM,YAEtBjE,WAAY,CACRmE,WAAY,QACZlE,SAAU,MAgBHmE,GAZO,WAClB,OACI,yBAAKpH,UAAU,OACX,kBAAC,EAAD,CAAQK,MAAOA,KACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgH,OAAK,EAACC,KAAK,IAAIC,UAAW9I,IACjC,kBAAC,IAAD,CAAO4I,OAAK,EAACC,KAAK,aAAaC,UAAW,kBAAM,kBAAC,GAAD,CAAWlH,MAAOA,WCZ9DmH,QACW,cAA7BpI,OAAOC,SAASoI,UAEe,UAA7BrI,OAAOC,SAASoI,UAEhBrI,OAAOC,SAASoI,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAAS9I,SAAS+I,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvK,KAAK,SAAAwK,GACjCA,EAAaC,iB","file":"static/js/main.22218a77.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst ApiUrl: String = 'https://lapx.herokuapp.com'\r\n\r\nexport async function getData() {\r\n    return await axios.get(ApiUrl + '/data')\r\n        .then(response => {\r\n            return response.data\r\n        }).catch(error => {\r\n            alert(\"Api is down.\")\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport async function getGraphsData(token: string) {\r\n    return await axios.get(ApiUrl + '/dataGraphs?token=' + token)\r\n        .then(response => {\r\n            return response.data\r\n        }).catch(error => {\r\n            alert(\"Api is down.\")\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport async function getUser(token: string) {\r\n    return await axios.get(ApiUrl + '/auth?token=' + token).then(response => {\r\n        return response.data\r\n    }).catch(error => {\r\n        alert(\"Api is down.\")\r\n        console.log(error)\r\n    })\r\n}\r\n\r\nexport async function addGraphs(token: string, amount: number) {\r\n    console.dir(token)\r\n    console.dir(amount)\r\n    return await axios.post(ApiUrl + '/addGraphs',\r\n        {\r\n            token: token,\r\n            amount: amount\r\n        }, {\r\n            headers: {\r\n                'Content-Type': 'text/plain'\r\n            }\r\n        }).catch(error => {\r\n        alert(\"Api is down.\")\r\n        console.log(error)\r\n    })\r\n}\r\n\r\n","import Cookies from \"universal-cookie/lib\";\r\n\r\nexport function setToken() {\r\n    const cookies = new Cookies();\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    let token = params.get('token');\r\n    if (token === null) {\r\n        const cookie = cookies.get('token');\r\n        if (cookie != null) {\r\n            token = cookie;\r\n        }\r\n    }\r\n    if (token !== null) {\r\n        cookies.set('token', token);\r\n    }\r\n}\r\n\r\nexport function getToken(): string {\r\n    const cookies = new Cookies();\r\n    return cookies.get('token');\r\n}","import React, {Component} from 'react';\r\nimport './Home.css';\r\nimport {getUser} from \"../../utils/Api\";\r\nimport {getToken, setToken} from \"../../utils/Authentication\";\r\n\r\ninterface IState {\r\n    email: string,\r\n    picture: string\r\n}\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport class Home extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props)\r\n        this.state = {\r\n            email: \"\",\r\n            picture: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.documentElement.classList.toggle('animatedBackground');\r\n        setToken();\r\n        this.getUserInfo();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.documentElement.classList.toggle('animatedBackground');\r\n    }\r\n\r\n    getUserInfo() {\r\n        const token = getToken();\r\n        getUser(token).then(response => this.setState({\r\n            email: response.Email,\r\n            picture: response.Picture\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        const {email, picture} = this.state;\r\n        return (\r\n            <div id='welcomeText'\r\n                 className='tile is-ancestor has-text-centered is-vertical'>\r\n                <div className='tile is-parent '>\r\n                    <article className='tile is-child'>\r\n                        <p id='welcomeTitle' className='title'>LapX Dashboard</p>\r\n                        <div className='content'>\r\n                            A beautiful dashboard loaded with random data.\r\n                        </div>\r\n                        <div className={email == \"\" ? 'is-hidden' : 'content'}>\r\n                            Welcome {email}\r\n                        </div>\r\n                    </article>\r\n                </div>\r\n            </div>\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {AppBar, Theme, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport createStyles from \"@material-ui/styles/createStyles\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faGithub, faLinkedin} from \"@fortawesome/free-brands-svg-icons\"\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {getToken} from \"../../utils/Authentication\";\r\nimport {getUser} from \"../../utils/Api\";\r\n\r\nconst ghPagesRouting = '/SitePersoFrontend/#';\r\nconst backend = 'https://lapx.herokuapp.com/';\r\n\r\ninterface IProps {\r\n    theme: Theme\r\n}\r\n\r\nconst style = makeStyles((theme) =>\r\n    createStyles({\r\n        navbarEnd: {\r\n            marginLeft: 'auto',\r\n            \"&:hover\": {\r\n                color: '#add5ff',\r\n                background: 'none',\r\n            }\r\n        },\r\n        homeAppBar: {\r\n            background: 'transparent',\r\n            boxShadow: 'none',\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        },\r\n        appBar: {\r\n            background: '#004587',\r\n            boxShadow: 'none',\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        },\r\n        button: {\r\n            \"&:hover\": {\r\n                color: '#add5ff',\r\n                background: 'none'\r\n            }\r\n        },\r\n    }));\r\n\r\n\r\nconst Navbar = (props: IProps) => {\r\n    const classes = style();\r\n    const {theme} = props;\r\n    const [hash, setHash] = useState(window.location.hash);\r\n    const [userPicture, setUserPicture] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"hashchange\", onHashChange);\r\n        getUserPicture();\r\n    }, []);\r\n\r\n    const onHashChange = () => {\r\n        setHash(window.location.hash)\r\n    }\r\n\r\n    const getUserPicture = async () => {\r\n        const token = getToken();\r\n        const userInfo = await getUser(token);\r\n        setUserPicture(userInfo.Picture)\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppBar\r\n                position=\"relative\"\r\n                className={hash == \"#/\" ? classes.homeAppBar : classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton color='primary' href={ghPagesRouting + '/'} className={classes.button}>\r\n                        <Typography>\r\n                            Home\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <IconButton color='primary' href={ghPagesRouting + '/Dashboard'} className={classes.button}>\r\n                        <Typography>\r\n                            Dashboard\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <IconButton color='primary' href={backend + '/auth/google/login'}\r\n                                className={userPicture == \"\" ? classes.navbarEnd : \"is-hidden\"}>\r\n                        <Typography>\r\n                            Login\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <IconButton color='primary' href={backend + '/auth/google/login'}\r\n                                className={userPicture == \"\" ? \"is-hidden\" : classes.navbarEnd}>\r\n                        <Avatar src={userPicture}/>\r\n                    </IconButton>\r\n                    <IconButton color='primary'\r\n                                className={classes.button}\r\n                                href=\"https://github.com/LapX\">\r\n                        <FontAwesomeIcon icon={faGithub}/>\r\n                    </IconButton>\r\n                    <IconButton color='primary'\r\n                                className={classes.button}\r\n                                href=\"https://www.linkedin.com/in/tommy-montreuil-30714ba8/\">\r\n                        <FontAwesomeIcon icon={faLinkedin}/>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </ThemeProvider>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {Theme} from \"@material-ui/core\";\r\nimport {VictoryAxis, VictoryBar, VictoryChart, VictoryStack, VictoryTheme} from 'victory';\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport createStyles from \"@material-ui/styles/createStyles/createStyles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\ninterface IProps {\r\n    theme: Theme\r\n    EarningsGraphData: Array<EarningsGraphData>\r\n}\r\n\r\ninterface EarningsGraphData {\r\n    ID: number\r\n    Tuples: Array<Tuples>\r\n}\r\n\r\ninterface Tuples {\r\n    Quarter: number\r\n    Earnings: number\r\n}\r\n\r\n\r\nconst style = makeStyles(() =>\r\n    createStyles({\r\n        container: {\r\n            width: 500,\r\n            backgroundColor: '#242424',\r\n            margin: 10,\r\n            borderRadius: 10,\r\n        },\r\n        containerMobile: {\r\n            width: 'auto',\r\n            backgroundColor: '#242424',\r\n            margin: 10,\r\n            borderRadius: 10,\r\n        },\r\n        typography: {\r\n            color: 'white',\r\n            fontSize: 20,\r\n            margin: 20,\r\n            marginBottom: -50,\r\n            marginLeft: 'auto',\r\n            width: '70%',\r\n        }\r\n    }))\r\n;\r\n\r\nconst axisStyle = {\r\n    grid: {stroke: 'grey'},\r\n    ticks: {opacity: 0},\r\n    tickLabels: {fill: 'white', font: 'arial'},\r\n}\r\n\r\nconst EarningsGraph = (props: IProps) => {\r\n    const classes = style();\r\n    const {theme, EarningsGraphData} = props;\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div\r\n                className={window.matchMedia(\"(max-width: 570px)\").matches ? classes.containerMobile : classes.container}>\r\n                <Typography className={classes.typography}>Earnings in the\r\n                    last {EarningsGraphData.length} years</Typography>\r\n                <VictoryChart domainPadding={30} theme={VictoryTheme.material}>\r\n                    <VictoryAxis tickValues={[\"Quarter 1\", \"Quarter 2\", \"Quarter 3\", \"Quarter 4\"]} style={axisStyle}/>\r\n                    <VictoryAxis dependentAxis tickFormat={(x) => (`$${x / 1000}k`)} style={axisStyle}/>\r\n                    <VictoryStack colorScale={\"cool\"}>\r\n                        {EarningsGraphData.map(data => (<VictoryBar\r\n                            key={data.ID}\r\n                            data={data.Tuples}\r\n                            x={\"Quarter\"}\r\n                            y={\"Earnings\"}\r\n                        />))}\r\n                    </VictoryStack>\r\n                </VictoryChart>\r\n            </div>\r\n        </ThemeProvider>\r\n\r\n    )\r\n        ;\r\n}\r\n\r\nexport default EarningsGraph;\r\n","import {Drawer, ListItem, ListItemText, Theme} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport createStyles from \"@material-ui/styles/createStyles/createStyles\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faChartBar} from \"@fortawesome/free-solid-svg-icons\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport {addGraphs} from \"../../utils/Api\";\r\nimport {getToken} from \"../../utils/Authentication\";\r\n\r\n\r\ninterface IProps {\r\n    theme: Theme\r\n    updateCallback: Function\r\n}\r\n\r\nconst drawerWidth = 170;\r\n\r\nconst style = makeStyles((theme) =>\r\n    createStyles({\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n            backgroundColor: '#242424',\r\n            color: '#ffffff'\r\n        },\r\n        expansionPanel: {\r\n            backgroundColor: '#242424',\r\n            color: '#ffffff'\r\n        },\r\n        button: {\r\n            backgroundColor: '#202020',\r\n            color: '#ffffff',\r\n            fontSize: 25,\r\n            width: 60\r\n        },\r\n        avatar: {\r\n            backgroundColor: '#004587',\r\n            marginRight: 12\r\n        },\r\n        toolbar: theme.mixins.toolbar\r\n    }))\r\n;\r\n\r\nconst ClippedDrawer = (props: IProps) => {\r\n    const {theme, updateCallback} = props\r\n    const classes = style();\r\n\r\n    const adjustNumberOfGraphs = async (number: number) => {\r\n        await addGraphs(getToken(), number);\r\n        updateCallback();\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Drawer\r\n                theme={theme}\r\n                className={classes.drawer} variant=\"permanent\" classes={{\r\n                paper: classes.drawerPaper,\r\n            }}>\r\n                <div className={classes.toolbar}/>\r\n                <ExpansionPanel className={classes.expansionPanel}>\r\n                    <ExpansionPanelSummary>\r\n                        <ListItem button key={'Graphs'}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <FontAwesomeIcon icon={faChartBar}/>\r\n                            </Avatar>\r\n                            <ListItemText primary={'Graphs'}/>\r\n                        </ListItem>\r\n                    </ExpansionPanelSummary>\r\n                    <ExpansionPanelDetails>\r\n                        <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\r\n                            <Button onClick={() => {\r\n                                adjustNumberOfGraphs(-1)\r\n                            }} className={classes.button}>-</Button>\r\n                            <Button onClick={() => {\r\n                                adjustNumberOfGraphs(1)\r\n                            }} className={classes.button}>+</Button>\r\n                        </ButtonGroup>\r\n                    </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n            </Drawer>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default ClippedDrawer;","import React, {useEffect, useState} from 'react';\r\nimport {Theme} from \"@material-ui/core\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport createStyles from \"@material-ui/styles/createStyles/createStyles\";\r\nimport {getGraphsData} from \"../../utils/Api\";\r\nimport {getToken} from \"../../utils/Authentication\";\r\nimport EarningsGraph from \"./EarningsGraph\";\r\nimport ClippedDrawer from \"../drawer/ClippedDrawer\";\r\n\r\ninterface IProps {\r\n    theme: Theme\r\n}\r\n\r\nconst style = makeStyles(() =>\r\n    createStyles({\r\n        container: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            width: '90%',\r\n        }\r\n    }))\r\n;\r\n\r\nconst Dashboard = (props: IProps) => {\r\n    const classes = style();\r\n    const {theme} = props\r\n    const [graphsData, setGraphsData] = useState({\r\n        EarningsGraphArray: [{\r\n            EarningsGraphData: []\r\n        }]\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchAndSetGraphsData()\r\n    }, []);\r\n\r\n    const fetchAndSetGraphsData = async () => {\r\n        const token = getToken();\r\n        const fetchedData = await getGraphsData(token);\r\n        if (fetchedData.EarningsGraphArray != null) {\r\n            setGraphsData(fetchedData)\r\n        } else {\r\n            setGraphsData({EarningsGraphArray: []})\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <ClippedDrawer theme={theme} updateCallback={fetchAndSetGraphsData}/>\r\n            {graphsData.EarningsGraphArray.map(data => (\r\n                <EarningsGraph theme={theme} EarningsGraphData={data.EarningsGraphData}/>))\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport Home from \"../home/Home\";\r\nimport Navbar from \"../navbar/Navbar\";\r\nimport Dashboard from \"../dashboard/Dashboard\"\r\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {main: '#FFFFFF'},\r\n        secondary: {main: '#0078ff'},\r\n    },\r\n    typography: {\r\n        fontFamily: 'arial',\r\n        fontSize: 18,\r\n    },\r\n});\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar theme={theme}/>\r\n            <HashRouter>\r\n                <Route exact path='/' component={Home}/>\r\n                <Route exact path='/Dashboard' component={() => <Dashboard theme={theme}/>}/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}