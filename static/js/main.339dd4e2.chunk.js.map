{"version":3,"sources":["utils/Api.ts","components/home/Home.tsx","components/navbar/Navbar.tsx","components/dashboard/EarningsGraph.tsx","components/dashboard/Dashboard.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["ApiUrl","getData","a","axios","get","then","response","data","catch","error","alert","console","log","token","Home","props","state","email","picture","document","documentElement","classList","toggle","this","checkIfUserIsLoggedIn","cookies","Cookies","search","window","location","URLSearchParams","cookie","set","getUser","setState","Email","Picture","id","className","Component","style","makeStyles","createStyles","navbarEnd","marginLeft","color","background","appBar","boxShadow","button","Navbar","classes","theme","ThemeProvider","AppBar","position","Toolbar","IconButton","href","ghPagesRouting","Typography","backend","icon","faGithub","faLinkedin","container","width","backgroundColor","margin","borderRadius","containerMobile","typography","fontSize","marginBottom","axisStyle","grid","stroke","ticks","opacity","tickLabels","fill","font","EarningsGraph","useState","ID","Tuples","setData","useEffect","fetchAndSetData","fetchedData","matchMedia","matches","length","domainPadding","VictoryTheme","material","animate","duration","easing","tickValues","dependentAxis","tickFormat","x","colorScale","map","key","y","display","flexWrap","marginRight","Dashboard","createMuiTheme","palette","primary","main","secondary","fontFamily","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.339dd4e2.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst ApiUrl: String = 'https://lapx.herokuapp.com/'\r\n\r\nexport async function getData() {\r\n    return await axios.get(ApiUrl + '/data')\r\n        .then(response => {\r\n            return response.data\r\n        }).catch(error => {\r\n            alert(\"Api is down.\")\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport async function getUser(token: string) {\r\n    return await axios.get(ApiUrl + '/auth?token=' + token).then(response => {\r\n        return response.data\r\n    }).catch(error => {\r\n        alert(\"Api is down.\")\r\n        console.log(error)\r\n    })\r\n}\r\n","import React, {Component} from 'react';\r\nimport './Home.css';\r\nimport {getUser} from \"../../utils/Api\";\r\nimport Cookies from \"universal-cookie/lib\";\r\n\r\ninterface IState {\r\n    email: string,\r\n    picture: string\r\n}\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport class Home extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props)\r\n        this.state = {\r\n            email: \"\",\r\n            picture: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.documentElement.classList.toggle('animatedBackground');\r\n        this.checkIfUserIsLoggedIn();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.documentElement.classList.toggle('animatedBackground');\r\n    }\r\n\r\n    checkIfUserIsLoggedIn() {\r\n        const cookies = new Cookies();\r\n        const search = window.location.search;\r\n        const params = new URLSearchParams(search);\r\n        let token = params.get('token');\r\n        if (token === null) {\r\n            const cookie = cookies.get('token');\r\n            if (cookie != null) {\r\n                token = cookie;\r\n            }\r\n        }\r\n        if (token !== null) {\r\n            cookies.set('token', token);\r\n            getUser(token).then(response => this.setState({\r\n                email: response.Email,\r\n                picture: response.Picture\r\n            }))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {email, picture} = this.state;\r\n        return (\r\n            <div id='welcomeText'\r\n                 className='tile is-ancestor has-text-centered is-vertical'>\r\n                <div className='tile is-parent '>\r\n                    <article className='tile is-child'>\r\n                        <p id='welcomeTitle' className='title'>Dashboard</p>\r\n                        <div className='content'>\r\n                            A beautiful dashboard loaded with random data.\r\n                        </div>\r\n                        <div className={email == \"\" ? 'is-hidden' : 'content'}>\r\n                            Welcome {email}\r\n                        </div>\r\n                    </article>\r\n                </div>\r\n            </div>\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {AppBar, Theme, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport createStyles from \"@material-ui/styles/createStyles\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faGithub, faLinkedin} from \"@fortawesome/free-brands-svg-icons\"\r\n\r\nconst ghPagesRouting = '/SitePersoFrontend/#';\r\n//const backend = 'https://lapx.herokuapp.com/';\r\nconst backend = 'http://localhost:8080/';\r\n\r\ninterface IProps {\r\n    theme: Theme\r\n}\r\n\r\nconst style = makeStyles(() =>\r\n    createStyles({\r\n        navbarEnd: {\r\n            marginLeft: 'auto',\r\n            \"&:hover\": {\r\n                color: '#add5ff',\r\n                background: 'none'\r\n            }\r\n        },\r\n        appBar: {\r\n            background: 'transparent',\r\n            boxShadow: 'none',\r\n        },\r\n        button: {\r\n            \"&:hover\": {\r\n                color: '#add5ff',\r\n                background: 'none'\r\n            }\r\n        },\r\n    }));\r\n\r\nconst Navbar = (props: IProps) => {\r\n    const classes = style();\r\n    const {theme} = props\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppBar\r\n                position=\"relative\"\r\n                className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton color='primary' href={ghPagesRouting + '/'} className={classes.button}>\r\n                        <Typography>\r\n                            Home\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <IconButton color='primary' href={ghPagesRouting + '/Dashboard'} className={classes.button}>\r\n                        <Typography>\r\n                            Dashboard\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <IconButton color='primary' href={backend + '/auth/google/login'} className={classes.button}>\r\n                        <Typography>\r\n                            Login\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <IconButton color='primary'\r\n                                className={classes.navbarEnd}\r\n                                href=\"https://github.com/LapX\">\r\n                        <FontAwesomeIcon icon={faGithub}/>\r\n                    </IconButton>\r\n                    <IconButton color='primary'\r\n                                className={classes.button}\r\n                                href=\"https://www.linkedin.com/in/tommy-montreuil-30714ba8/\">\r\n                        <FontAwesomeIcon icon={faLinkedin}/>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </ThemeProvider>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React, {useEffect, useState} from 'react';\r\nimport {Theme} from \"@material-ui/core\";\r\nimport {VictoryAxis, VictoryBar, VictoryChart, VictoryStack, VictoryTheme} from 'victory';\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport createStyles from \"@material-ui/styles/createStyles/createStyles\";\r\nimport {getData} from \"../../utils/Api\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\ninterface IProps {\r\n    theme: Theme\r\n}\r\n\r\nconst style = makeStyles(() =>\r\n    createStyles({\r\n        container: {\r\n            width: 500,\r\n            backgroundColor: '#242424',\r\n            margin: 10,\r\n            borderRadius: 10,\r\n        },\r\n        containerMobile: {\r\n            width: 'auto',\r\n            backgroundColor: '#242424',\r\n            margin: 10,\r\n            borderRadius: 10,\r\n        },\r\n        typography: {\r\n            color: 'white',\r\n            fontSize: 20,\r\n            margin: 20,\r\n            marginBottom: -50,\r\n            marginLeft: 'auto',\r\n            width: '70%',\r\n        }\r\n    }))\r\n;\r\n\r\nconst axisStyle = {\r\n    grid: {stroke: 'grey'},\r\n    ticks: {opacity: 0},\r\n    tickLabels: {fill: 'white', font: 'arial'},\r\n}\r\n\r\nconst EarningsGraph = (props: IProps) => {\r\n    const classes = style();\r\n    const {theme} = props;\r\n    const [data, setData] = useState([{\r\n        ID: 0, Tuples: [{\r\n            \"Quarter\": 1,\r\n            \"Earnings\": 0\r\n        }]\r\n    }])\r\n\r\n    useEffect(() => {\r\n        fetchAndSetData()\r\n    }, [])\r\n\r\n    const fetchAndSetData = async () => {\r\n        const fetchedData = await getData();\r\n        if (fetchedData != null) {\r\n            setData(fetchedData)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div\r\n                className={window.matchMedia(\"(max-width: 570px)\").matches ? classes.containerMobile : classes.container}>\r\n                <Typography className={classes.typography}>Earnings in the last {data.length} years</Typography>\r\n                <VictoryChart domainPadding={30} theme={VictoryTheme.material}\r\n                              animate={{duration: 1000, easing: \"linear\"}}>\r\n                    <VictoryAxis tickValues={[\"Quarter 1\", \"Quarter 2\", \"Quarter 3\", \"Quarter 4\"]} style={axisStyle}/>\r\n                    <VictoryAxis dependentAxis tickFormat={(x) => (`$${x / 1000}k`)} style={axisStyle}/>\r\n                    <VictoryStack colorScale={\"cool\"}>\r\n                        {data.map(data => (<VictoryBar\r\n                            key={data.ID}\r\n                            data={data.Tuples}\r\n                            x={\"Quarter\"}\r\n                            y={\"Earnings\"}\r\n                        />))}\r\n                    </VictoryStack>\r\n                </VictoryChart>\r\n            </div>\r\n        </ThemeProvider>\r\n\r\n    )\r\n        ;\r\n}\r\n\r\nexport default EarningsGraph;\r\n","import React from 'react';\r\nimport {Theme} from \"@material-ui/core\";\r\nimport EarningsGraph from \"./EarningsGraph\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport createStyles from \"@material-ui/styles/createStyles/createStyles\";\r\n\r\ninterface IProps {\r\n    theme: Theme\r\n}\r\n\r\nconst style = makeStyles(() =>\r\n    createStyles({\r\n        container: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            width: '90%',\r\n        }\r\n    }))\r\n;\r\n\r\nconst Dashboard = (props: IProps) => {\r\n    const classes = style();\r\n    const {theme} = props\r\n    return (\r\n        <div className={classes.container}>\r\n            <EarningsGraph theme={theme}/>\r\n            <EarningsGraph theme={theme}/>\r\n            <EarningsGraph theme={theme}/>\r\n            <EarningsGraph theme={theme}/>\r\n            <EarningsGraph theme={theme}/>\r\n            <EarningsGraph theme={theme}/>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport Home from \"../home/Home\";\r\nimport Navbar from \"../navbar/Navbar\";\r\nimport Dashboard from \"../dashboard/Dashboard\"\r\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {main: '#FFFFFF'},\r\n        secondary: {main: '#0078ff'},\r\n    },\r\n    typography: {\r\n        fontFamily: 'arial',\r\n        fontSize: 18,\r\n    },\r\n});\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar theme={theme}/>\r\n            <HashRouter>\r\n                <Route exact path='/' component={Home}/>\r\n                <Route exact path='/Dashboard' component={() => <Dashboard theme={theme}/>}/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}