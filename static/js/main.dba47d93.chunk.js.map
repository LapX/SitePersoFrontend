{"version":3,"sources":["components/home/Home.tsx","components/navbar/Navbar.tsx","components/dashboard/Dashboard.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","props","state","document","documentElement","classList","toggle","id","className","Component","ghPagesRouting","theme","createMuiTheme","palette","primary","main","secondary","typography","fontFamily","fontSize","style","makeStyles","createStyles","navbarEnd","marginLeft","color","background","appBar","boxShadow","button","Navbar","classes","ThemeProvider","AppBar","Toolbar","IconButton","href","Typography","icon","faGithub","faLinkedin","Dashboard","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVAyCeA,G,MAhCf,YACI,WAAYC,GAAgB,IAAD,8BACvB,4CAAMA,KACDC,MAAQ,GAFU,EAD/B,iFAOQC,SAASC,gBAAgBC,UAAUC,OAAO,wBAPlD,6CAWQH,SAASC,gBAAgBC,UAAUC,OAAO,wBAXlD,+BAeQ,OACI,yBAAKC,GAAG,cACHC,UAAU,kDACX,yBAAKA,UAAU,mBACX,6BAASA,UAAU,iBACf,uBAAGD,GAAG,eAAeC,UAAU,SAA/B,aACA,yBAAKA,UAAU,WAAf,yDArBxB,GAA0BC,c,wGCCpBC,EAAiB,uBAEjBC,EAAQC,IAAe,CACzBC,QAAS,CACLC,QAAS,CAACC,KAAM,WAChBC,UAAW,CAACD,KAAM,YAEtBE,WAAY,CACRC,WAAY,QACZC,SAAU,MAIZC,EAAQC,IAAW,kBACrBC,YAAa,CACTC,UAAW,CACPC,WAAY,OACZ,UAAW,CACPC,MAAO,UACPC,WAAY,SAGpBC,OAAQ,CACJD,WAAY,cAAeE,UAAW,QAE1CC,OAAQ,CACJ,UAAW,CACPJ,MAAO,UACPC,WAAY,aAKb,SAASI,IACpB,IAAMC,EAAUX,IAChB,OACI,kBAACY,EAAA,EAAD,CAAerB,MAAOA,GAClB,kBAACsB,EAAA,EAAD,CAAQzB,UAAWuB,EAAQJ,QACvB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYV,MAAM,UAAUW,KAAM1B,EAAiB,IAAKF,UAAWuB,EAAQF,QACvE,kBAACQ,EAAA,EAAD,cAIJ,kBAACF,EAAA,EAAD,CAAYV,MAAM,UAAUW,KAAM1B,EAAiB,aAAcF,UAAWuB,EAAQF,QAChF,kBAACQ,EAAA,EAAD,mBAIJ,kBAACF,EAAA,EAAD,CAAYV,MAAM,UACNjB,UAAWuB,EAAQR,UACnBa,KAAK,2BACb,kBAAC,IAAD,CAAiBE,KAAMC,OAE3B,kBAACJ,EAAA,EAAD,CAAYV,MAAM,UACNjB,UAAWuB,EAAQF,OACnBO,KAAK,yDACb,kBAAC,IAAD,CAAiBE,KAAME,U,UC1ChCC,EAhBf,YACI,WAAYxC,GAAgB,IAAD,8BACvB,4CAAMA,KACDC,MAAQ,GAFU,EAD/B,sEAOQ,OACI,mDARZ,GAA+BO,aCShBiC,EAZO,WAClB,OACI,yBAAKlC,UAAU,OACX,kBAACsB,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAIC,UAAW7C,IACjC,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,aAAaC,UAAWJ,OCAtCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjD,SAASkD,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dba47d93.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Home.css';\r\n\r\ninterface IState {\r\n}\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport class Home extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.documentElement.classList.toggle('animatedBackground');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.documentElement.classList.toggle('animatedBackground');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='welcomeText'\r\n                 className='tile is-ancestor has-text-centered is-vertical'>\r\n                <div className='tile is-parent '>\r\n                    <article className='tile is-child'>\r\n                        <p id='welcomeTitle' className='title'>Dashboard</p>\r\n                        <div className='content'>\r\n                            A beautiful dashboard loaded with random data.\r\n                        </div>\r\n                    </article>\r\n                </div>\r\n            </div>\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport createStyles from \"@material-ui/styles/createStyles\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faGithub, faLinkedin} from \"@fortawesome/free-brands-svg-icons\"\r\n\r\nconst ghPagesRouting = '/SitePersoFrontend/#';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {main: '#FFFFFF'},\r\n        secondary: {main: '#0078ff'},\r\n    },\r\n    typography: {\r\n        fontFamily: 'arial',\r\n        fontSize: 18,\r\n    },\r\n});\r\n\r\nconst style = makeStyles(() =>\r\n    createStyles({\r\n        navbarEnd: {\r\n            marginLeft: 'auto',\r\n            \"&:hover\": {\r\n                color: '#add5ff',\r\n                background: 'none'\r\n            }\r\n        },\r\n        appBar: {\r\n            background: 'transparent', boxShadow: 'none',\r\n        },\r\n        button: {\r\n            \"&:hover\": {\r\n                color: '#add5ff',\r\n                background: 'none'\r\n            }\r\n        }\r\n    }))\r\n\r\nexport default function Navbar() {\r\n    const classes = style();\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton color='primary' href={ghPagesRouting + '/'} className={classes.button}>\r\n                        <Typography>\r\n                            Home\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <IconButton color='primary' href={ghPagesRouting + '/Dashboard'} className={classes.button}>\r\n                        <Typography>\r\n                            Dashboard\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <IconButton color='primary'\r\n                                className={classes.navbarEnd}\r\n                                href=\"https://github.com/LapX\">\r\n                        <FontAwesomeIcon icon={faGithub}/>\r\n                    </IconButton>\r\n                    <IconButton color='primary'\r\n                                className={classes.button}\r\n                                href=\"https://www.linkedin.com/in/tommy-montreuil-30714ba8/\">\r\n                        <FontAwesomeIcon icon={faLinkedin}/>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </ThemeProvider>\r\n    );\r\n\r\n}\r\n","import React, {Component} from 'react';\r\nimport './Dashboard.css';\r\n\r\ninterface IState {\r\n}\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport class Dashboard extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Dashboard here\r\n            </div>\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport {HashRouter, Route} from 'react-router-dom';\nimport Home from \"../home/Home\";\nimport Navbar from \"../navbar/Navbar\";\nimport Dashboard from \"../dashboard/Dashboard\"\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <Navbar/>\n            <HashRouter>\n                <Route exact path='/' component={Home}/>\n                <Route exact path='/Dashboard' component={Dashboard}/>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}